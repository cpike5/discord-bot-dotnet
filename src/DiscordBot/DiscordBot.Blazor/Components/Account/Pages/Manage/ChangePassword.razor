@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using DiscordBot.Blazor.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change Password</PageTitle>

<div class="content-card">
    <div class="content-header">
        <h2>Change Password</h2>
    </div>

    <StatusMessage Message="@message" />

    <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-group">
            <label for="old-password" class="form-label required">Current Password</label>
            <InputText type="password"
                       @bind-Value="Input.OldPassword"
                       id="old-password"
                       class="form-input"
                       autocomplete="current-password"
                       aria-required="true"
                       placeholder="Enter your current password" />
            <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="new-password" class="form-label required">New Password</label>
            <InputText type="password"
                       @bind-Value="Input.NewPassword"
                       id="new-password"
                       class="form-input"
                       autocomplete="new-password"
                       aria-required="true"
                       placeholder="Enter new password" />
            <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            <div class="helper-text">
                Must be at least 6 characters long
            </div>
        </div>

        <div class="form-group">
            <label for="confirm-password" class="form-label required">Confirm New Password</label>
            <InputText type="password"
                       @bind-Value="Input.ConfirmPassword"
                       id="confirm-password"
                       class="form-input"
                       autocomplete="new-password"
                       aria-required="true"
                       placeholder="Confirm new password" />
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>

        <button type="submit" class="btn btn-primary">Update Password</button>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
