@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using DiscordBot.Blazor.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage Email</PageTitle>

<div class="content-card">
    <div class="content-header">
        <h2>Manage Email</h2>
    </div>

    <StatusMessage Message="@message"/>

    <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
        <AntiforgeryToken />
    </form>

    <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        @if (isEmailConfirmed)
        {
            <div class="form-group">
                <label for="email" class="form-label">Current Email</label>
                <div class="input-group">
                    <input type="text"
                           id="email"
                           value="@email"
                           class="form-input"
                           placeholder="Please enter your email."
                           disabled />
                    <span class="input-verified">✓</span>
                </div>
                <div class="helper-text">
                    Your email is verified
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="email" class="form-label">Email</label>
                <input type="text"
                       id="email"
                       value="@email"
                       class="form-input"
                       placeholder="Please enter your email."
                       disabled />
                <button type="submit" class="btn btn-link" form="send-verification-form">Send verification email</button>
            </div>
        }

        <div class="form-group">
            <label for="new-email" class="form-label">New Email</label>
            <InputText @bind-Value="Input.NewEmail"
                       id="new-email"
                       class="form-input"
                       autocomplete="email"
                       aria-required="true"
                       placeholder="Please enter new email." />
            <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
            <div class="helper-text">
                You will receive a confirmation link at your new email address
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Change Email</button>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
