@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using DiscordBot.Blazor.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<div class="content-card">
    <div class="content-header">
        <h2>Profile</h2>
    </div>

    <StatusMessage />

    <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-group">
            <label for="username" class="form-label">Username</label>
            <input type="text"
                   id="username"
                   value="@username"
                   class="form-input"
                   placeholder="Please choose your username."
                   disabled />
            <div class="helper-text">
                Your username cannot be changed
            </div>
        </div>

        <div class="form-group">
            <label for="phone-number" class="form-label">Phone Number</label>
            <InputText @bind-Value="Input.PhoneNumber"
                       id="phone-number"
                       class="form-input"
                       placeholder="Please enter your phone number." />
            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            <div class="helper-text">
                Optional. Used for account recovery
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
