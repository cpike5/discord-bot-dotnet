@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using DiscordBot.Blazor.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-page">
    <div class="login-container">
        <!-- Header -->
        <div class="login-header">
            <div class="logo">DB</div>
            <h1>Welcome Back</h1>
            <p>Sign in to your Discord bot account</p>
        </div>

        <!-- Content -->
        <div class="login-content">
            <!-- Error Message -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    <span>⚠️</span>
                    <span>@errorMessage</span>
                </div>
            }

            <!-- OAuth Section -->
            <div class="oauth-section">
                <div class="section-title">Quick Sign-In</div>
                <ExternalLoginPicker />
            </div>

            <div class="divider">or</div>

            <!-- Email/Password Form -->
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-group">
                    <label class="form-label" for="email">Email</label>
                    <InputText @bind-Value="Input.Email" class="form-input" id="email" autocomplete="username" aria-required="true" placeholder="your.email@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div class="form-group">
                    <label class="form-label" for="password">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="form-input" id="password" autocomplete="current-password" aria-required="true" placeholder="Enter your password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                    <div class="forgot-password">
                        <a href="Account/ForgotPassword">Forgot password?</a>
                    </div>
                </div>

                <div class="remember-me">
                    <label class="checkbox-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="checkbox-input" />
                        <span>Remember me</span>
                    </label>
                </div>

                <button type="submit" class="btn btn-primary btn-full-width">Sign In</button>
            </EditForm>
        </div>

        <!-- Footer -->
        <div class="login-footer">
            <p>Don't have an account? <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Create one</a></p>
        </div>
    </div>
</div>

<style>
    /* Login Page Layout */
    .login-page {
        min-height: 100vh;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: var(--space-6);
        margin: calc(-1 * var(--space-6));
        background: linear-gradient(135deg, var(--color-neutral-50) 0%, var(--color-lavender) 100%);
    }

    /* Login Container */
    .login-container {
        background: var(--bg-primary);
        border-radius: var(--radius-xl);
        box-shadow: var(--shadow-xl);
        width: 100%;
        max-width: 450px;
        overflow: hidden;
    }

    /* Header */
    .login-header {
        background: var(--surface-primary);
        color: white;
        padding: var(--space-8);
        text-align: center;
    }

    .login-header .logo {
        width: 60px;
        height: 60px;
        background: var(--color-primary);
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: var(--text-3xl);
        font-weight: var(--font-bold);
        margin: 0 auto var(--space-4);
    }

    .login-header h1 {
        font-size: var(--text-2xl);
        margin-bottom: var(--space-2);
    }

    .login-header p {
        font-size: var(--text-sm);
        color: rgba(255, 255, 255, 0.8);
    }

    /* Content Area */
    .login-content {
        padding: var(--space-8);
    }

    /* OAuth Section */
    .oauth-section {
        margin-bottom: var(--space-6);
    }

    .section-title {
        font-size: var(--text-sm);
        font-weight: var(--font-semibold);
        color: var(--text-secondary);
        text-align: center;
        margin-bottom: var(--space-4);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Divider */
    .divider {
        display: flex;
        align-items: center;
        gap: var(--space-4);
        margin: var(--space-6) 0;
        color: var(--text-muted);
        font-size: var(--text-sm);
    }

    .divider::before,
    .divider::after {
        content: '';
        flex: 1;
        height: 1px;
        background: var(--border-medium);
    }

    /* Error Message */
    .login-content .error-message {
        background: rgba(218, 65, 103, 0.1);
        border: 1px solid var(--color-danger);
        border-radius: var(--radius-md);
        padding: var(--space-3);
        margin-bottom: var(--space-5);
        display: flex;
        align-items: center;
        gap: var(--space-2);
        color: var(--color-danger);
        font-size: var(--text-sm);
    }

    /* Form overrides for login page */
    .login-content .form-group {
        margin-bottom: var(--space-5);
    }

    .login-content .form-input {
        max-width: none;
    }

    /* Forgot Password */
    .forgot-password {
        text-align: right;
        margin-top: var(--space-2);
    }

    .forgot-password a {
        color: var(--color-primary);
        text-decoration: none;
        font-size: var(--text-sm);
        font-weight: var(--font-medium);
    }

    .forgot-password a:hover {
        text-decoration: underline;
    }

    /* Remember Me Checkbox */
    .remember-me {
        margin-bottom: var(--space-5);
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        cursor: pointer;
        font-size: var(--text-sm);
        color: var(--text-primary);
    }

    .checkbox-input {
        width: 18px;
        height: 18px;
        cursor: pointer;
        accent-color: var(--color-primary);
    }

    /* Button Full Width */
    .btn-full-width {
        width: 100%;
        padding: var(--space-4);
    }

    /* Footer */
    .login-footer {
        padding: var(--space-6);
        background: var(--bg-secondary);
        border-top: 1px solid var(--border-light);
        text-align: center;
        font-size: var(--text-sm);
        color: var(--text-secondary);
    }

    .login-footer a {
        color: var(--color-primary);
        text-decoration: none;
        font-weight: var(--font-semibold);
    }

    .login-footer a:hover {
        text-decoration: underline;
    }

    /* Validation Summary */
    .login-content .text-danger {
        font-size: var(--text-sm);
        margin-top: var(--space-2);
    }

    .login-content .validation-summary-errors {
        background: rgba(218, 65, 103, 0.1);
        border: 1px solid var(--color-danger);
        border-radius: var(--radius-md);
        padding: var(--space-3);
        margin-bottom: var(--space-5);
    }

    .login-content .validation-summary-errors ul {
        margin: 0;
        padding-left: var(--space-5);
    }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
