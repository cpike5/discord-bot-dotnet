@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using DiscordBot.Blazor.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div class="no-providers">
        <p>
            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
            about setting up this ASP.NET application to support logging in via external services</a>.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <AntiforgeryToken />
        <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
        @foreach (var provider in externalLogins)
        {
            var providerLower = provider.Name.ToLower();
            var buttonClass = $"oauth-btn {providerLower}";

            <button type="submit" class="@buttonClass" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
                <div class="oauth-icon">
                    @if (providerLower == "discord")
                    {
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515a.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0a12.64 12.64 0 0 0-.617-1.25a.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057a19.9 19.9 0 0 0 5.993 3.03a.078.078 0 0 0 .084-.028a14.09 14.09 0 0 0 1.226-1.994a.076.076 0 0 0-.041-.106a13.107 13.107 0 0 1-1.872-.892a.077.077 0 0 1-.008-.128a10.2 10.2 0 0 0 .372-.292a.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127a12.299 12.299 0 0 1-1.873.892a.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028a19.839 19.839 0 0 0 6.002-3.03a.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.956-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.955-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.946 2.418-2.157 2.418z"/>
                        </svg>
                    }
                    else if (providerLower == "microsoft" || providerLower == "microsoftaccount")
                    {
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <path d="M11.4 3H3v8.4h8.4V3z" fill="#f25022"/>
                            <path d="M21 3h-8.4v8.4H21V3z" fill="#7fba00"/>
                            <path d="M11.4 12.6H3V21h8.4v-8.4z" fill="#00a4ef"/>
                            <path d="M21 12.6h-8.4V21H21v-8.4z" fill="#ffb900"/>
                        </svg>
                    }
                    else if (providerLower == "google")
                    {
                        <svg width="24" height="24" viewBox="0 0 24 24">
                            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                        </svg>
                    }
                    else
                    {
                        <span>🔑</span>
                    }
                </div>
                <span>Continue with @provider.DisplayName</span>
            </button>
        }
    </form>
}

<style>
    /* OAuth Buttons */
    .oauth-btn {
        width: 100%;
        padding: var(--space-3) var(--space-4);
        border: 2px solid var(--border-medium);
        border-radius: var(--radius-lg);
        background: var(--bg-primary);
        cursor: pointer;
        transition: all var(--transition-base);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: var(--space-3);
        font-family: var(--font-primary);
        font-size: var(--text-base);
        font-weight: var(--font-semibold);
        color: var(--text-primary);
        margin-bottom: var(--space-3);
    }

    .oauth-btn:last-of-type {
        margin-bottom: 0;
    }

    .oauth-btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
    }

    .oauth-icon {
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .oauth-btn.discord {
        background: #5865F2;
        border-color: #5865F2;
        color: white;
    }

    .oauth-btn.discord:hover {
        background: #4752C4;
        border-color: #4752C4;
    }

    .oauth-btn.microsoft,
    .oauth-btn.microsoftaccount {
        background: white;
        border-color: var(--border-medium);
        color: var(--text-primary);
    }

    .oauth-btn.microsoft:hover,
    .oauth-btn.microsoftaccount:hover {
        border-color: #0078D4;
        background: #F3F9FD;
    }

    .oauth-btn.google {
        background: white;
        border-color: var(--border-medium);
        color: var(--text-primary);
    }

    .oauth-btn.google:hover {
        border-color: #4285F4;
        background: #F8FBFF;
    }

    .no-providers {
        font-size: var(--text-sm);
        color: var(--text-secondary);
    }

    .no-providers a {
        color: var(--color-primary);
        text-decoration: none;
    }

    .no-providers a:hover {
        text-decoration: underline;
    }
</style>

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
